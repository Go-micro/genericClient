// Code generated by protoc-gen-go.
// source: generic.proto
// DO NOT EDIT!

/*
Package GenericClient is a generated protocol buffer package.

It is generated from these files:
	generic.proto

It has these top-level messages:
	Common
*/
package GenericClient

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Common struct {
	Body []byte `protobuf:"bytes,1,opt,name=body,proto3" json:"body,omitempty"`
}

func (m *Common) Reset()                    { *m = Common{} }
func (m *Common) String() string            { return proto.CompactTextString(m) }
func (*Common) ProtoMessage()               {}
func (*Common) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Common) GetBody() []byte {
	if m != nil {
		return m.Body
	}
	return nil
}

func init() {
	proto.RegisterType((*Common)(nil), "GenericClient.Common")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Generic service

type GenericClient interface {
	Printify(ctx context.Context, in *Common, opts ...grpc.CallOption) (*Common, error)
}

type genericClient struct {
	cc *grpc.ClientConn
}

func NewGenericClient(cc *grpc.ClientConn) GenericClient {
	return &genericClient{cc}
}

func (c *genericClient) Printify(ctx context.Context, in *Common, opts ...grpc.CallOption) (*Common, error) {
	out := new(Common)
	err := grpc.Invoke(ctx, "/GenericClient.Generic/Printify", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Generic service

type GenericServer interface {
	Printify(context.Context, *Common) (*Common, error)
}

func RegisterGenericServer(s *grpc.Server, srv GenericServer) {
	s.RegisterService(&_Generic_serviceDesc, srv)
}

func _Generic_Printify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Common)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenericServer).Printify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/GenericClient.Generic/Printify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenericServer).Printify(ctx, req.(*Common))
	}
	return interceptor(ctx, in, info, handler)
}

var _Generic_serviceDesc = grpc.ServiceDesc{
	ServiceName: "GenericClient.Generic",
	HandlerType: (*GenericServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Printify",
			Handler:    _Generic_Printify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "generic.proto",
}

func init() { proto.RegisterFile("generic.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 113 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x4d, 0x4f, 0xcd, 0x4b,
	0x2d, 0xca, 0x4c, 0xd6, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x75, 0x87, 0x70, 0x9d, 0x73,
	0x32, 0x53, 0xf3, 0x4a, 0x94, 0x64, 0xb8, 0xd8, 0x9c, 0xf3, 0x73, 0x73, 0xf3, 0xf3, 0x84, 0x84,
	0xb8, 0x58, 0x92, 0xf2, 0x53, 0x2a, 0x25, 0x18, 0x15, 0x18, 0x35, 0x78, 0x82, 0xc0, 0x6c, 0x23,
	0x57, 0x2e, 0x76, 0xa8, 0x72, 0x21, 0x2b, 0x2e, 0x8e, 0x80, 0xa2, 0xcc, 0xbc, 0x92, 0xcc, 0xb4,
	0x4a, 0x21, 0x51, 0x3d, 0x14, 0x43, 0xf4, 0x20, 0x26, 0x48, 0x61, 0x17, 0x56, 0x62, 0x48, 0x62,
	0x03, 0x5b, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0xed, 0x7f, 0xbe, 0x47, 0x8b, 0x00, 0x00,
	0x00,
}
